import { ApiProperty } from '@nestjs/swagger';
import { IsOptional, IsString, IsObject } from 'class-validator';

export class CreateSdkLinkDto {
  @ApiProperty({
    description: 'Optional custom slug for the link',
    example: 'summer-promo',
    required: false,
  })
  @IsString()
  @IsOptional()
  slug?: string;

  @ApiProperty({
    description: 'iOS URL for the link',
    example: 'myapp://product/123',
    required: false,
  })
  @IsString()
  @IsOptional()
  iosUrl?: string;

  @ApiProperty({
    description: 'Android URL for the link',
    example: 'myapp://product/123',
    required: false,
  })
  @IsString()
  @IsOptional()
  androidUrl?: string;

  @ApiProperty({
    description: 'Fallback URL for the link',
    example: 'https://myapp.com/product/123',
    required: false,
  })
  @IsString()
  @IsOptional()
  fallbackUrl?: string;

  @ApiProperty({
    description: 'Additional parameters for the link',
    example: { utm_source: 'email', campaign: 'summer' },
    required: false,
  })
  @IsObject()
  @IsOptional()
  parameters?: Record<string, any>;
}
import {
  Controller,
  Post,
  Get,
  Body,
  Param,
  UseGuards,
  Request,
  NotFoundException,
  Inject,
} from '@nestjs/common';
import { DynamicLinksService } from '../dynamic-links/dynamic-links.service';
import { CreateSdkLinkDto } from './dto/create-sdk-link.dto';
import { ApiKeyGuard } from '../../auth/guards/api-key.guard';
import { ApiHeader, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';
import { Public } from '../../auth/decorators/public.decorator';
import { domains } from '../../lib/db/schema';
import { eq } from 'drizzle-orm';
import { PostgresJsDatabase } from 'drizzle-orm/postgres-js';
import * as schema from '../../lib/db/schema';

@ApiTags('SDK Links')
@Controller('sdk')
export class SdkLinksController {
  constructor(
    private readonly dynamicLinksService: DynamicLinksService,
    @Inject('DRIZZLE') private readonly db: PostgresJsDatabase<typeof schema>,
  ) {}

  @Post('links')
  @UseGuards(ApiKeyGuard)
  @ApiOperation({ summary: 'Create a new dynamic link via SDK' })
  @ApiResponse({ status: 201, description: 'Dynamic link created' })
  @ApiHeader({
    name: 'X-App-Key',
    description: 'API Key for authentication',
    required: true,
  })
  async create(@Body() createSdkLinkDto: CreateSdkLinkDto, @Request() req) {
    // Get the project ID from the API key
    const apiKeyProjectId = req.apiKey.projectId;

    // Find a verified domain for this project
    const projectDomains = await this.db
      .select()
      .from(domains)
      .where(eq(domains.project_id, apiKeyProjectId));

    // First try to find a verified domain
    let domainId = projectDomains.find((domain) => domain.verified)?.id;

    // If no verified domain, try to use any domain (not ideal but allows testing)
    if (!domainId && projectDomains.length > 0) {
      domainId = projectDomains[0].id;
    }

    // If no domain found, throw an error
    if (!domainId) {
      throw new NotFoundException(
        'No domain found for this project. Please add and verify a domain first.',
      );
    }

    // Use the existing dynamic links service to create the link with API key authentication
    return this.dynamicLinksService.create(
      {
        ...createSdkLinkDto,
        projectId: apiKeyProjectId,
        domainId,
      },
      undefined, // No userId for API key auth
      apiKeyProjectId, // Pass the projectId from the API key
    );
  }

  @Get('links/:slug')
  @Public()
  @ApiOperation({ summary: 'Get a dynamic link by slug' })
  @ApiResponse({ status: 200, description: 'Dynamic link found' })
  @ApiResponse({ status: 404, description: 'Dynamic link not found' })
  async findBySlug(@Param('slug') slug: string) {
    // Use the existing dynamic links service to find and process the link
    return this.dynamicLinksService.findBySlug(slug);
  }
}
